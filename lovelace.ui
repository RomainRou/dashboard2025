decluttering_templates:
  template_custom_button_room_card:
    card:
      type: custom:button-card
      tap_action:
        action: navigate
        navigation_path: '[[navigation]]' #adresse du popup ne pas modifier ici
        haptic: success
      show_icon: false
      aspect_ratio: 6/1
      name: '[[title]]' #titre de la carte ne pas modifier ici
      custom_fields:
        chip_card_right_top:
          card:
            type: custom:mushroom-chips-card
            chips:
              
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_1_top_right]]' #entité afficher a gauche avec condition on ou recording ne pas modifier ici
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_1_top_right]]'
                  icon: >
                    {% if states['[[entity_1_top_right]]'].attributes['icon'] %}
                    {{ states['[[entity_1_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_1_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_1_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_1_top_right]]', 'on') or
                    is_state('[[entity_1_top_right]]', 'recording') %}
                     [[entity_1_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_1_top_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_2_top_right]]' #entité afficher a gauche avec condition on ou recording ne pas modifier ici
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_2_top_right]]'
                  icon: >
                    {% if states['[[entity_2_top_right]]'].attributes['icon'] %}
                    {{ states['[[entity_2_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_2_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_2_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_2_top_right]]', 'on') or
                    is_state('[[entity_2_top_right]]', 'recording') %}
                     [[entity_2_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_2_top_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_3_top_right]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_3_top_right]]' #entité afficher a gauche avec condition on ou recording ne pas modifier ici
                  icon: >
                    {% if states['[[entity_3_top_right]]'].attributes['icon'] %}
                    {{ states['[[entity_3_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_3_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_3_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_3_top_right]]', 'on') or
                    is_state('[[entity_3_top_right]]', 'recording') %}
                     [[entity_3_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_3_top_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_1_top_right]]' #entité lumiere afficher a gauche avec condition on et extinction direct depuis la carte principale ne pas modifier ici
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_1_top_right]]'
                  icon: >
                    {% if states['[[light_1_top_right]]'].attributes['icon'] %}
                    {{ states['[[light_1_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_1_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_1_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_1_top_right]]', 'on') or
                    is_state('[[light_1_top_right]]', 'recording') %}
                     [[light_1_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_light_1_top_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_2_top_right]]' #entité lumiere afficher a gauche avec condition on et extinction direct depuis la carte principale ne pas modifier ici
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_2_top_right]]'
                  icon: >
                    {% if states['[[light_2_top_right]]'].attributes['icon'] %}
                    {{ states['[[light_2_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_2_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_2_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_2_top_right]]', 'on') or
                    is_state('[[light_2_top_right]]', 'recording') %}
                     [[light_1_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_light_2_top_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_3_top_right]]' #entité lumiere afficher a gauche avec condition on et extinction direct depuis la carte principale ne pas modifier ici
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_3_top_right]]'
                  icon: >
                    {% if states['[[light_3_top_right]]'].attributes['icon'] %}
                    {{ states['[[light_3_top_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_3_top_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_3_top_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_3_top_right]]', 'on') or
                    is_state('[[light_3_top_right]]', 'recording') %}
                     [[entity_3_icon_color_top_right]]
                    {% endif %}
                  content: '[[content_light_3_top_right]]'
        chip_card_left_top:
          card:
            type: custom:mushroom-chips-card
            chips:
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_cover]]' #afficher a droite sans condition pour les volets avec icon adaptative a la position (reste afficher) ne pas modifier ici
                    state:
                      - open
                      - closed
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  icon: >-
                    {% set position =
                    states['[[entity_cover]]'].attributes.current_position | int
                    %} {% if position == 100 %}
                      cil:shutter-0
                    {% elif position >= 75 %}
                      cil:shutter-1
                    {% elif position >= 50 %}
                      cil:shutter-2
                    {% elif position >= 25 %}
                      cil:shutter-3
                    {% elif position >= 0 %}
                      cil:shutter-4
                    {% else %}
                      mdi:window-shutter-closed
                    {% endif %}
                  icon_color: '#03a9f4'
                  entity: '[[entity_cover]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_alarme]]' #entité afficher a droite pour une alarme avec affichage sous condition avec desarmement direct depuis la carte principale ne pas modifier ici
                    state:
                      - armed_away
                      - armed_night
                      - triggered
                chip:
                  type: alarm-control-panel
                  entity: '[[entity_alarme]]'
                  tap_action:
                    action: perform-action
                    perform_action: alarm_control_panel.alarm_disarm
                    target:
                      entity_id: '[[entity_alarme]]'
                    data:
                      code: '[[code_alarm]]'
                  haptic: succes
                  hold_action:
                    action: none
                  content_info: none
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_alarme]]'
                    state:
                      - armed_away
                      - armed_night
                      - triggered
                chip:
                  type: template
                  tap_action:
                    action: navigate
                    navigation_path: '[[navigation_cam]]' #adresse du popup pour les cameras ne pas modifier ici
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_3_top_left]]' #entité afficher a droite pour une camera sous condition ne pas modifier ici
                  icon: >
                    {% if states['[[entity_3_top_left]]'].attributes['icon'] %}
                    {{ states['[[entity_3_top_left]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_3_top_left]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_3_top_left]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: [[entity_3_icon_color_top_left]]
                  content: '[[content_3_top_left]]'
      styles:
        name:
          - color: white
          - font-weight: bold
          - text-shadow: >-
              1px 1px 3px #000000, 1px 1px 2px #000000, 1px 1px 2px #000000, 1px
              1px 2px
        card:
          - background-position: center
          - background-size: cover
          - background: url('[[background_image]]') no-repeat center center #background des cartes ne pas modifier ici
        custom_fields:
          chip_card_right_top:
            - position: absolute
            - right: 1%
          chip_card_left_top:
            - position: absolute
            - left: 1%
  template_custom_button_weather_card:
    card:
      type: custom:button-card
      tap_action:
        action: navigate
        navigation_path: '[[navigation]]' #adresse du popup ne pas modifier ici
        haptic: success
      show_icon: false
      aspect_ratio: 6/1
      entity: '[[entity_ville]]' #entité fourni par l'integration meteo
      name: '[[title]]' # titre de la carte
      custom_fields:
        chip_card_right_top:
          card:
            type: custom:mushroom-chips-card
            alignment: end
            chips:
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[group_light]]' #groupe lumieres qui permet de savoir combien de lampes sont allumé dans le groupe affichage sous condition on
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  entity: '[[group_light]]'
                  icon: >
                    {% if states['[[group_light]]'].attributes['icon'] %}

                    {{ states['[[group_light]]'].attributes['icon'] }}

                    {% elif states['[[group_light]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[group_light]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: '#03a9f4'
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  tap_action:
                    action: none
                  content: >-
                    {{ expand('[[group_light]]') | selectattr('state', 'eq',
                    'on') | list | length }}
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[group_prises]]' #groupe prises qui permet de savoir combien de prises sont allumé dans le groupe affichage sous condition on
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  entity: '[[group_prises]]'
                  icon: >
                    {% if states['[[group_prises]]'].attributes['icon'] %}

                    {{ states['[[group_prises]]'].attributes['icon'] }}

                    {% elif
                    states['[[group_prises]]'].attributes['device_class'] %}
                      mdi:{{ states['[[group_prises]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: '#03a9f4'
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  tap_action:
                    action: none
                  content: >-
                    {{ expand('[[group_prises]]') | selectattr('state', 'eq',
                    'on') | list | length }}
        chip_card_left_top:
          card:
            type: custom:mushroom-chips-card
            alignment: end
            chips:
                #groupe volets qui permet de savoir combien de volet sont ouvert,fermé ou partiellement ouvert dans le groupe
              - type: template
                tap_action:
                  action: none
                hold_action:
                  action: none
                double_tap_action:
                  action: none
                icon: >-
                  {% set position =
                  states['[[cover_group]]'].attributes.current_position | int %}
                  {% if position == 100 %}
                    cil:shutter-0
                  {% elif position >= 75 %}
                    cil:shutter-1
                  {% elif position >= 50 %}
                    cil:shutter-2
                  {% elif position >= 25 %}
                    cil:shutter-3
                  {% elif position >= 0 %}
                    cil:shutter-4
                  {% else %}
                    mdi:window-shutter-closed
                  {% endif %}
                icon_color: '#03a9f4'
                content: |
                  {% if expand("[[cover_group]]") | length > 0 %}
                    {% set all = expand("[[cover_group]]" | lower) -%} 
                    {% set positions = all | map(attribute='attributes.current_position') | list -%}
                    {% set fermes = positions | reject("!=", 0) | list | count %}
                    {% set ouverts = positions | reject("!=", 100) | list | count %}
                    {% set partiels = positions | list | count - ouverts - fermes %} {%- if fermes > 0 %} F:{{ fermes }} {%- endif %} 
                    {%- if partiels > 0 %} P:{{ partiels }} {%- endif %} 
                    {%- if ouverts > 0 %} O:{{ ouverts }} {%- endif %} {% else %} {% set position = states['[[cover]]'].attributes.current_position | int %} {% if position > 0 %} {{ position }}% {% endif %}
                  {% endif %}
                entity: '[[cover_group]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[capteur_bal]]' #affichage du compteur boite aux lettres avec remise a zero direct depuis la carte principale
                    state_not: '0'
                chip:
                  type: template
                  entity: '[[capteur_bal]]'
                  icon: mdi:email-outline
                  content: '{{ states(''[[capteur_bal]]'') }}'
                  icon_color: |-
                    {% if states('[[capteur_bal]]') | int > 0 %}        
                      red
                    {% endif %}
                  tap_action:
                    action: perform-action
                    perform_action: script.mise_a_zero_boite_aux_lettres
                    target: {}
      styles:
        name:
          - color: white
          - font-weight: bold
          - text-shadow: >-
              1px 1px 3px #000000, 1px 1px 2px #000000, 1px 1px 2px #000000, 1px
              1px 2px
        card:
          - background-position: center
          - background-size: cover
          #background adaptatif de la carte meteo
          - background-image: |
              [[[ 
                if (entity.state === "sunny") return "url('https://i.pinimg.com/originals/d8/a2/ee/d8a2eee27b91f50078645085e4057f3c.gif')";
                if (entity.state === "snowy") return "url('https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzJ2Z2FzOTFnZWhkdTczOHg5MTU1enhweWR4b2JpemM4MGpmaWxibyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o6fISORwH1fcsQW0U/giphy.gif')";
                if (entity.state === "snowy-rainy") return "url('https://www.icegif.com/wp-content/uploads/2022/01/icegif-1013.gif')";
                if (entity.state === "lightning-rainy") return "url('https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWFjZmp3YWVva2pzaWhuZ3hmcHF6b3dna2FkMGpwbXh0ZWZoMzBmMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o7TKrt6z6Eg9MLvl6/giphy.gif')";
                if (entity.state === "lightning") return "url('https://media1.giphy.com/media/l0MYzA5czu7GV1Xt6/giphy.gif?cid=9b38fe919too4we4vrgbc57o3xqx0jjm9qi9w6f7gnh6h2sj&ep=v1_gifs_search&rid=giphy.gif&ct=g')";
                if (entity.state === "hail") return "url('https://i.gifer.com/DJxO.gif')";
                if (entity.state === "partlycloudy") return "url('https://i.gifer.com/g1vA.gif')";
                if (entity.state === "cloudy") return "url('https://i.gifer.com/g1vA.gif')";
                if (entity.state === "mostlycloudy") return "url('https://i.gifer.com/Lx0q.gif')";
                if (entity.state === "clear-night") return "url('https://i.gifer.com/IrS.gif')";
                if (entity.state === "fog") return "url('https://i.gifer.com/8AC8.gif')";
                if (entity.state === "rainy") return "url('https://i.gifer.com/FEuz.gif')";
                return "none";
              ]]]                  
        custom_fields:
          chip_card_right_top:
            - position: absolute
            - right: 1%
          chip_card_left_top:
            - position: absolute
            - left: 1%
  template_custom_badges:
    card:
      type: custom:mushroom-template-badge
      content: '{{ states(''[[sensor_temp]]'') | float | round(1) }}°' #sensor temp pour les badges 
      icon: mdi:thermometer
      #couleur de l'icone dynamique s'adapte a la temperature 
      color: |-
        {% set temp = states('[[sensor_temp]]') | float %} 
        {% if temp >= 32 %}
          rgb(199, 199, 199)
        {% elif 31.62 <= temp < 32 %}
          rgb(255, 69, 58)
        {% elif 31.23 <= temp < 31.62 %}
          rgb(247, 72, 58)
        {% elif 30.85 <= temp < 31.23 %}
          rgb(240, 76, 59)
        {% elif 30.46 <= temp < 30.85 %}
          rgb(233, 79, 59)
        {% elif 30.08 <= temp < 30.46 %}
          rgb(226, 83, 60)
        {% elif 29.69 <= temp < 30.08 %}
          rgb(219, 86, 60)
        {% elif 29.31 <= temp < 29.69 %}
          rgb(211, 90, 61)
        {% elif 28.92 <= temp < 29.31 %}
          rgb(204, 93, 61)
        {% elif 28.54 <= temp < 28.92 %}
          rgb(197, 97, 62)
        {% elif 28.15 <= temp < 28.54 %}
          rgb(190, 100, 62)
        {% elif 27.77 <= temp < 28.15 %}
          rgb(183, 104, 63)
        {% elif 27.38 <= temp < 27.77 %}
          rgb(175, 107, 63)
        {% elif 27 <= temp < 27.38 %}
          rgb(168, 111, 64)
        {% elif 26.62 <= temp < 27 %}
          rgb(161, 114, 64)
        {% elif 26.23 <= temp < 26.62 %}
          rgb(154, 118, 65)
        {% elif 25.85 <= temp < 26.23 %}
          rgb(147, 121, 65)
        {% elif 25.46 <= temp < 25.85 %}
          rgb(139, 125, 66)
        {% elif 25.08 <= temp < 25.46 %}
          rgb(132, 128, 66)
        {% elif 24.69 <= temp < 25.08 %}
          rgb(125, 132, 67)
        {% elif 24.31 <= temp < 24.69 %}
          rgb(118, 135, 67)
        {% elif 23.92 <= temp < 24.31 %}
          rgb(111, 139, 68)
        {% elif 23.54 <= temp < 23.92 %}
          rgb(103, 142, 68)
        {% elif 23.15 <= temp < 23.54 %}
          rgb(96, 146, 69)
        {% elif 22.77 <= temp < 23.15 %}
          rgb(89, 149, 69)
        {% elif 22.38 <= temp < 22.77 %}
          rgb(82, 153, 70)
        {% elif 22 <= temp < 22.38 %}
          rgb(75, 156, 70)
        {% elif 21.38 <= temp < 22 %}
          rgb(68, 160, 71)
        {% elif 20.75 <= temp < 21.38 %}
          rgb(63, 160, 81)
        {% elif 20.13 <= temp < 20.75 %}
          rgb(59, 161, 92)
        {% elif 19.5 <= temp < 20.13 %}
          rgb(55, 161, 103)
        {% elif 18.88 <= temp < 19.5 %}
          rgb(51, 162, 114)
        {% elif 18.25 <= temp < 18.88 %}
          rgb(47, 162, 125)
        {% elif 17.63 <= temp < 18.25 %}
          rgb(43, 163, 135)
        {% elif 17 <= temp < 17.63 %}
          rgb(39, 163, 146)
        {% elif 16.38 <= temp < 17 %}
          rgb(35, 164, 157)
        {% elif 15.75 <= temp < 16.38 %}
          rgb(31, 165, 168)
        {% elif 15.13 <= temp < 15.75 %}
          rgb(27, 165, 179)
        {% elif 14.5 <= temp < 15.13 %}
          rgb(23, 166, 189)
        {% elif 13.88 <= temp < 14.5 %}
          rgb(19, 166, 200)
        {% elif 13.25 <= temp < 13.88 %}
          rgb(15, 167, 211)
        {% elif 12.63 <= temp < 13.25 %}
          rgb(11, 167, 222)
        {% elif 12 <= temp < 12.63 %}
          rgb(7, 168, 233)
        {% else %}
          rgb(3, 169, 244)
        {% endif %}
      entity: '[[sensor_temp]]'
      tap_action:
        action: none
      hold_action:
        action: none
      double_tap_action:
        action: none
      label: '[[label]]' #titre du badge
#template de la carte du tableu pronote integrable dans les popups
  template_pronote_card:
    card:
      type: custom:tabbed-card
      styles:
        '--mdc-typography-button-font-size': 11px
        '--mdc-theme-primary': white
        '--mdc-tab-text-label-color-default': grey
        background: rgb(54, 54, 54)
        border: solid 1px rgb(40, 40, 40)
        border-top-left-radius: 10px
        border-top-right-radius: 10px
        font-style: italic
      tabs:
        - attributes:
            isMinWidthIndicator: true
            label: 📆 Emploi du temps
          card:
            type: custom:pronote-timetable-card
            display_header: false
            display_lunch_break: true
            display_classroom: true
            display_teacher: true
            display_day_hours: true
            dim_ended_lessons: true
            max_days: null
            current_week_only: false
            enable_slider: true
            display_free_time_slots: true
            entity: sensor.pronote_[[nom_prenom]]_timetable_period
        - attributes:
            isMinWidthIndicator: true
            label: 📗Devoirs
          card:
            type: custom:pronote-homework-card
            entity: sensor.pronote_[[nom_prenom]]_homework
            display_header: false
            display_done_homework: true
            reduce_done_homework: true
            current_week_only: false
        - attributes:
            isMinWidthIndicator: true
            label: ❌ Absences et sorties
          card:
            type: custom:pronote-absences-card
            entity: sensor.pronote_[[nom_prenom]]_absences
            display_header: false
            max_absences: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝Retards
          card:
            type: custom:pronote-delays-card
            entity: sensor.pronote_[[nom_prenom]]_delays
            display_header: false
            max_delays: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝Evaluations
          card:
            type: custom:pronote-evaluations-card
            entity: sensor.pronote_[[nom_prenom]]_evaluations
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIdicator: true
            label: 📝Notes
          card:
            type: custom:pronote-grades-card
            entity: sensor.pronote_[[nom_prenom]]_grades
            grade_format: full
            display_header: false
            display_date: true
            display_comment: true
            display_class_average: false
            compare_with_class_average: true
            compare_with_ratio: null
            display_coefficient: false
            display_class_min: false
            display_class_max: false
            display_new_grade_notice: true
            max_grades: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝punitions test
          card:
            type: custom:pronote-punishements-card
            entity: sensor.pronote_[[nom_prenom]]_punishements
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝informations test
          card:
            type: custom:pronote-info-surveys-card
            entity: sensor.pronote_[[nom_prenom]]_information_and_surveys
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 🗞️Informations
          card:
            type: markdown
            content: |-
              <table>
                  <tbody>
                      {% set items = state_attr('sensor.pronote_[[nom_prenom]]_information_and_surveys','information_and_surveys') %}
                      {%-for i in range(0, items | count, 1) -%}
                      <tr> 
                          <td><span>{{items[i].author}} / {{items[i].category}} :</span>
                          {{items[i].content}}</td>
                      </tr>
                      {% endfor %}
                </tbody>
              </table>
            card_mod:
              style:
                .: |
                  ha-card ha-markdown {
                    padding:0px
                  }
                  ha-card ha-markdown.no-header {
                    padding:0px
                  }
                  ha-markdown {
                      overflow-y: auto;
                      border-bottom-left-radius: 10px; 
                      border-bottom-right-radius: 10px;
                      border-top-left-radius: 10px; 
                      border-top-right-radius: 10px;
                    }
                ha-markdown$: |
                  div {
                      background-color:rgb(54, 54, 54, 0.3);
                      padding: 5px 5px;
                      color:white;
                      font-weight:normal;
                      font-size:1em;
                      border-top-left-radius: 10px; 
                      text-align: center;
                       
                  }
                  mark {
                      background: #00BD81;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #005f41 2px;
                      font-size: 1.2em;
                      }
                  h2 {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      margin-left: 10%;
                      margin-right: 10%;
                      }
                  table{
                    border-collapse: collapse;
                    font-size: 0.85em;
                    font-family: Roboto;
                    width: auto;
                    outline: 0px solid #393c3d;
                    margin-top: 0px;
                  } caption {
                      text-align: center;
                      font-weight: bold;
                      font-size: 1em;
                  } td {
                      padding: 5px 8px 5px 8px;
                      text-align: left;
                      border-bottom: 0px solid #1c2020;
                  }
                  tr {
                      border-bottom: 0px solid #1c2020;
                  }

                  tr:nth-of-type(even) {
                      background-color: rgb(54, 54, 54, 0.3);
                  }
                  tr:last-of-type {
                      border-bottom: transparent;
                  }
                  mark {
                      background: #009767;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                  }
                  span {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      vertical-align: center;
                      height: auto;
                      padding: 5px;
                      display: block;
                  }
                  span {
                      padding: 5px;
                  }
        - attributes:
            isMinWidthIndicator: true
            label: 🚨punissions
          card:
            type: markdown
            content: |-
              <table>
                  <tbody>
                      {% set items = state_attr('sensor.pronote_[[nom_prenom]]_punishments','punishments') %}
                      {%-for i in range(0, items | count, 1) -%}
                      <tr> 
                          <td><span>{{items[i].date}}
                          <td><span>{{items[i].nature}}<br></span>
                          <td><span>{{items[i].giver}} <br> {{items[i].reasons}}<br>
                          {{items[i].circumstances}} </span>
                          </td>
                      </tr>
                      {% endfor %}
                </tbody>
              </table>
            card_mod:
              style:
                .: |
                  ha-card ha-markdown {
                    padding:0px
                  }
                  ha-card ha-markdown.no-header {
                    padding:0px
                  }
                  ha-markdown {
                      overflow-y: auto;
                      border-bottom-left-radius: 10px; 
                      border-bottom-right-radius: 10px;
                      border-top-left-radius: 10px; 
                      border-top-right-radius: 10px;
                    }
                ha-markdown$: |
                  div {
                      background-color:rgb(54, 54, 54, 0.3);
                      padding: 5px 5px;
                      color:white;
                      font-weight:normal;
                      font-size:1em;
                      border-top-left-radius: 10px; 
                      text-align: center;
                       
                  }
                  mark {
                      background: #00BD81;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #005f41 2px;
                      font-size: 1.2em;
                      }
                  h2 {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      margin-left: 10%;
                      margin-right: 10%;
                      }
                  table{
                    border-collapse: collapse;
                    font-size: 0.85em;
                    font-family: Roboto;
                    width: auto;
                    outline: 0px solid #393c3d;
                    margin-top: 0px;
                  } caption {
                      text-align: center;
                      font-weight: bold;
                      font-size: 1em;
                  } td {
                      padding: 5px 8px 5px 8px;
                      text-align: left;
                      border-bottom: 0px solid #1c2020;
                  }
                  tr {
                      border-bottom: 0px solid #1c2020;
                  }

                  tr:nth-of-type(even) {
                      background-color: rgb(54, 54, 54, 0.3);
                  }
                  tr:last-of-type {
                      border-bottom: transparent;
                  }
                  mark {
                      background: #009767;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                  }
                  span {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      vertical-align: center;
                      height: auto;
                      padding: 5px;
                      display: block;
                  }
                  span {
                      padding: 5px;
                  }
        - attributes:
            isMinWidthIndicator: true
            label: 🍖Menu cantine
          card:
            type: custom:tabbed-card
            title: menu cantine
            styles:
              '--mdc-typography-button-font-size': 10px
              '--mdc-theme-primary': white
              '--mdc-tab-text-label-color-default': grey
              background: rgb(54, 54, 54)
              border: solid 1px rgb(40, 40, 40)
            tabs:
              - attributes:
                  isMinWidthIndicator: true
                  label: 🥗Entrées
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}
                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'> 
                        {% for entry in items[i].first_meal %}
                         {{ entry.name }}
                        {% endfor %}
                      </td>
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                            border-top-left-radius:10px;
                            border-top-right-radius:10px;
                            border-bottom-left-radius:10px;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 0px;
                          text-align: center;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 0px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent; 
                        }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-weight: normal;
                              font-size: 0.8em;
                              }
                        span {
                            background: transparent;
                            color: white;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍖Plats principal
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'> 
                        {% for main in items[i].main_meal %}
                          {{ main.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍟Accompagnements
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% if items[i].side_meal %}
                          {% for side in items[i].side_meal %}
                            {{ side.name }}
                          {% endfor %}
                        {% else %}
                          PAS_DISPO
                        {% endif %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🧀Fromages
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% for cheese in items[i].cheese %}
                          {{ cheese.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍦Desserts
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}
                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% for dessert in items[i].dessert %}
                          {{ dessert.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
#template de la carte de controle de volet avec affichage d'etat dans les popups
  template_cover_chip_card:
    card:
      type: custom:mushroom-chips-card
      alignment: center
      chips:
        - type: template
          tap_action:
            action: none
          hold_action:
            action: none
          double_tap_action:
            action: none
          entity: '[[cover]]'
          icon: >-
            {% set position = states['[[cover]]'].attributes.current_position |
            int %} {% if position == 100 %}
              cil:shutter-0
            {% elif position >= 75 %}
              cil:shutter-1
            {% elif position >= 50 %}
              cil:shutter-2
            {% elif position >= 25 %}
              cil:shutter-3
            {% elif position >= 0 %}
              cil:shutter-4
            {% else %}
              mdi:window-shutter-closed
            {% endif %}
          icon_color: '#03a9f4'
          card_mod:
            style: |
              ha-card{
                --chip-background: #03a9f425;
                border: none;
              }
        - type: template
          tap_action:
            action: none
          hold_action:
            action: none
          double_tap_action:
            action: none
          content: |
            {% if expand("[[cover_group]]") | length > 0 %}
              {% set all = expand("[[cover_group]]" | lower) -%} 
              {% set positions = all | map(attribute='attributes.current_position') | list -%}
              {% set fermes = positions | reject("!=", 0) | list | count %}
              {% set ouverts = positions | reject("!=", 100) | list | count %}
              {% set partiels = positions | list | count - ouverts - fermes %} {%- if fermes > 0 %} Fermé(s):{{ fermes }} {%- endif %} 
              {%- if partiels > 0 %} Partiel(s):{{ partiels }} {%- endif %} 
              {%- if ouverts > 0 %} Ouvert(s):{{ ouverts }} {%- endif %} {% else %} {% set position = states['[[cover]]'].attributes.current_position | int %} {% if position > 0 %} {{ position }}% {% endif %}
            {% endif %}
          entity: '[[cover_group]]'
          card_mod:
            style: |
              ha-card{
                border: none;
                --chip-background: none;
              }
        - type: template
          tap_action:
            action: perform-action
            perform_action: cover.open_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          hold_action:
            action: none
          double_tap_action:
            action: none
          icon: mdi:arrow-up-bold
          icon_color: |
            {% if 0 <= state_attr('[[cover]]', 'current_position') <=
            99 %}
              #03a9f4
            {% else %}
              #808080
            {% endif %}
          card_mod:
            style: |
              ha-card{
                border: none;
                --chip-background: {% if 0 <= state_attr('[[cover]]', 'current_position') <= 99 %} #03a9f425 {% else %} #80808025 {% endif %};
              }
        - type: template
          tap_action:
            action: perform-action
            perform_action: cover.stop_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          hold_action:
            action: none
          double_tap_action:
            action: none
          icon: mdi:pause
          icon_color: |
            {% if 1 <= state_attr('[[cover]]', 'current_position') <= 99 %}
              #03a9f4
            {% else %}
              #808080
            {% endif %}
          card_mod:
            style: |
              ha-card{
                border: none;
                --chip-background: {% if 1 <= state_attr('[[cover]]', 'current_position') <= 99 %} #03a9f425 {% else %} #80808025 {% endif %};
              }
        - type: template
          tap_action:
            action: perform-action
            perform_action: cover.close_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          hold_action:
            action: none
          double_tap_action:
            action: none
          icon: mdi:arrow-down-bold
          icon_color: |
            {% if 1 <= state_attr('[[cover]]', 'current_position') <=
            100 %}
              #03a9f4
            {% else %}
              #808080
            {% endif %}
          card_mod:
            style: |
              ha-card{
                border: none;
                --chip-background: {% if 1 <= state_attr('[[cover]]', 'current_position') <= 100 %} #03a9f425 {% else %} #80808025 {% endif %};
              }
#template de la carte minigraph dans les popups
  template_mini_graph_card:
    card:
      type: custom:button-card
      tap_action:
        action: none
      hold_action:
        action: none
      aspect_ratio: 5/2
      custom_fields:
        power_1:
          card:
            type: custom:button-card
            entity: '[[power_1]]'
            variables:
              name_power_1: '[[name_power_1]]'
            name: |
              [[[ 
                if (variables.name_power_1) {
                return variables.name_power_1;
                } else {
                return null;
                }
              ]]]
            tap_action:
              action: none
            hold_action:
              action: none
            show_icon: false
            show_state: true
            styles:
              card:
                - background: none
                - border: none
                - margin-top: '-5px'
              state:
                - color: lightgray
                - font-size: 24px
                - justify-self: start
        power_2:
          card:
            type: custom:button-card
            entity: '[[power_2]]'
            tap_action:
              action: none
            hold_action:
              action: none
            variables:
              name_power_2: '[[name_power_2]]'
            name: |
              [[[ 
                if (variables.name_power_2) {
                return variables.name_power_2;
                } else {
                return null;
                }
              ]]]
            show_icon: false
            show_state: true
            styles:
              card:
                - background: none
                - border: none
                - margin-top: '-5px'
              state:
                - color: lightgray
                - font-size: 24px
                - justify-self: start
        power_3:
          card:
            type: custom:button-card
            entity: '[[power_3]]'
            tap_action:
              action: none
            hold_action:
              action: none
            variables:
              name_power_1: '[[name_power_3]]'
            name: |
              [[[ 
                if (variables.name_power_3) {
                return variables.name_power_3;
                } else {
                return null;
                }
              ]]]
            show_icon: false
            show_state: true
            styles:
              card:
                - background: none
                - border: none
                - margin-top: '-5px'
              name:
                - color: lightgray
                - font-size: 16px
              state:
                - color: lightgray
                - font-size: 24px
                - justify-self: start
        temperature:
          card:
            type: custom:button-card
            entity: '[[temp]]'
            tap_action:
              action: none
            hold_action:
              action: none
            name: []
            show_icon: false
            show_state: true
            styles:
              card:
                - background: none
                - border: none
                - margin-top: '-5px'
              state:
                - color: lightgray
                - font-size: 24px
                - justify-self: start
        humidity:
          card:
            type: custom:button-card
            entity: '[[humidity]]'
            tap_action:
              action: none
            hold_action:
              action: none
            name: []
            show_icon: false
            show_state: true
            styles:
              card:
                - background: none
                - border: none
                - margin-top: '-5px'
              state:
                - color: lightgray
                - font-size: 24px
                - justify-self: start
        graph_2:
          card:
            type: custom:mini-graph-card
            entities:
              - '[[humidity]]'
            show:
              icon: false
              name: false
              state: false
              graph: bar
            tap_action:
              action: none
            hold_action:
              action: none
            color_thresholds:
              - value: 100
                color: '#FF453A'
              - value: 99.32
                color: '#FC463A'
              - value: 98.65
                color: '#F9473A'
              - value: 97.97
                color: '#F7483A'
              - value: 97.3
                color: '#F4493A'
              - value: 96.62
                color: '#F24B3A'
              - value: 95.95
                color: '#EF4C3B'
              - value: 95.27
                color: '#ED4D3B'
              - value: 94.59
                color: '#EA4E3B'
              - value: 93.92
                color: '#E8503B'
              - value: 93.24
                color: '#E5513B'
              - value: 92.57
                color: '#E3523B'
              - value: 91.89
                color: '#E0533C'
              - value: 91.22
                color: '#DE543C'
              - value: 90.54
                color: '#DB563C'
              - value: 89.86
                color: '#D9573C'
              - value: 89.19
                color: '#D6583C'
              - value: 88.51
                color: '#D4593C'
              - value: 87.84
                color: '#D15B3D'
              - value: 87.16
                color: '#CE5C3D'
              - value: 86.49
                color: '#CC5D3D'
              - value: 85.81
                color: '#C95E3D'
              - value: 85.14
                color: '#C7603D'
              - value: 84.46
                color: '#C4613E'
              - value: 83.78
                color: '#C2623E'
              - value: 83.11
                color: '#BF633E'
              - value: 82.43
                color: '#BD643E'
              - value: 81.76
                color: '#BA663E'
              - value: 81.08
                color: '#B8673E'
              - value: 80.41
                color: '#B5683F'
              - value: 79.73
                color: '#B3693F'
              - value: 79.05
                color: '#B06B3F'
              - value: 78.38
                color: '#AE6C3F'
              - value: 77.7
                color: '#AB6D3F'
              - value: 77.03
                color: '#A96E3F'
              - value: 76.35
                color: '#A67040'
              - value: 75.68
                color: '#A47140'
              - value: 75
                color: '#A17240'
              - value: 74.32
                color: '#9E7340'
              - value: 73.65
                color: '#9C7440'
              - value: 72.97
                color: '#997641'
              - value: 72.3
                color: '#977741'
              - value: 71.62
                color: '#947841'
              - value: 70.95
                color: '#927941'
              - value: 70.27
                color: '#8F7B41'
              - value: 69.59
                color: '#8D7C41'
              - value: 68.92
                color: '#8A7D42'
              - value: 68.24
                color: '#887E42'
              - value: 67.57
                color: '#858042'
              - value: 66.89
                color: '#838142'
              - value: 66.22
                color: '#808242'
              - value: 65.54
                color: '#7E8342'
              - value: 64.86
                color: '#7B8443'
              - value: 64.19
                color: '#798643'
              - value: 63.51
                color: '#768743'
              - value: 62.84
                color: '#748843'
              - value: 62.16
                color: '#718943'
              - value: 61.49
                color: '#6E8B44'
              - value: 60.81
                color: '#6C8C44'
              - value: 60.14
                color: '#698D44'
              - value: 59.46
                color: '#678E44'
              - value: 58.78
                color: '#649044'
              - value: 58.11
                color: '#629144'
              - value: 57.43
                color: '#5F9245'
              - value: 56.76
                color: '#5D9345'
              - value: 56.08
                color: '#5A9445'
              - value: 55.41
                color: '#589645'
              - value: 54.73
                color: '#559745'
              - value: 54.05
                color: '#539845'
              - value: 53.38
                color: '#509946'
              - value: 52.7
                color: '#4E9B46'
              - value: 52.03
                color: '#4B9C46'
              - value: 51.35
                color: '#499D46'
              - value: 50.68
                color: '#469E46'
              - value: 50
                color: '#44A047'
              - value: 47.92
                color: '#429D4E'
              - value: 45.83
                color: '#419A55'
              - value: 43.75
                color: '#40975C'
              - value: 41.67
                color: '#3F9563'
              - value: 39.58
                color: '#3E926B'
              - value: 37.5
                color: '#3D8F72'
              - value: 35.42
                color: '#3B8D79'
              - value: 33.33
                color: '#3A8A80'
              - value: 31.25
                color: '#398787'
              - value: 29.17
                color: '#38848F'
              - value: 27.08
                color: '#378296'
              - value: 25
                color: '#367F9D'
              - value: 22.92
                color: '#347CA4'
              - value: 20.83
                color: '#337AAB'
              - value: 18.75
                color: '#3277B3'
              - value: 16.67
                color: '#3174BA'
              - value: 14.58
                color: '#3071C1'
              - value: 12.5
                color: '#2F6FC8'
              - value: 10.42
                color: '#2D6CCF'
              - value: 8.33
                color: '#2C69D7'
              - value: 6.25
                color: '#2B67DE'
              - value: 4.17
                color: '#2A64E5'
              - value: 2.08
                color: '#2961EC'
              - value: 0
                color: '#285FF4'
            hours_to_show: 36
            points_per_hour: 0.5
            card_mod:
              style: |
                ha-card {
                  box-shadow: none;
                  border: none;
                  background: none;
                  width: 100%;
                }
                .name {
                  --primary-text-color: #00000000;
                }
        graph_1:
          card:
            type: custom:mini-graph-card
            entities:
              - '[[temp]]'
            show:
              icon: false
              name: false
              state: false
            tap_action:
              action: none
            hold_action:
              action: none
            color_thresholds:
              - value: 46
                color: '#FF453A'
              - value: 45.74
                color: '#FE483A'
              - value: 45.49
                color: '#FE4C3A'
              - value: 45.23
                color: '#FE4F3A'
              - value: 44.97
                color: '#FE533B'
              - value: 44.72
                color: '#FD563B'
              - value: 44.46
                color: '#FD5A3B'
              - value: 44.21
                color: '#FD5D3C'
              - value: 43.95
                color: '#FD613C'
              - value: 43.69
                color: '#FD643C'
              - value: 43.44
                color: '#FC683D'
              - value: 43.18
                color: '#FC6B3D'
              - value: 42.92
                color: '#FC6F3D'
              - value: 42.67
                color: '#FC723E'
              - value: 42.41
                color: '#FC763E'
              - value: 42.15
                color: '#FB793E'
              - value: 41.9
                color: '#FB7D3E'
              - value: 41.64
                color: '#FB803F'
              - value: 41.38
                color: '#FB843F'
              - value: 41.13
                color: '#FB873F'
              - value: 40.87
                color: '#FA8B40'
              - value: 40.62
                color: '#FA8E40'
              - value: 40.36
                color: '#FA9240'
              - value: 40.1
                color: '#FA9541'
              - value: 39.85
                color: '#FA9941'
              - value: 39.59
                color: '#F99C41'
              - value: 39.33
                color: '#F9A042'
              - value: 39.08
                color: '#F9A342'
              - value: 38.82
                color: '#F9A742'
              - value: 38.56
                color: '#F9AA42'
              - value: 38.31
                color: '#F8AE43'
              - value: 38.05
                color: '#F8B143'
              - value: 37.79
                color: '#F8B543'
              - value: 37.54
                color: '#F8B844'
              - value: 37.28
                color: '#F8BC44'
              - value: 37.03
                color: '#F7BF44'
              - value: 36.77
                color: '#F7C345'
              - value: 36.51
                color: '#F7C645'
              - value: 36.26
                color: '#F7CA45'
              - value: 36
                color: '#F7CE46'
              - value: 35.59
                color: '#F0CC46'
              - value: 35.17
                color: '#EACA46'
              - value: 34.76
                color: '#E4C946'
              - value: 34.34
                color: '#DEC746'
              - value: 33.93
                color: '#D8C646'
              - value: 33.52
                color: '#D1C446'
              - value: 33.1
                color: '#CBC246'
              - value: 32.69
                color: '#C5C146'
              - value: 32.28
                color: '#BFBF46'
              - value: 31.86
                color: '#B9BE46'
              - value: 31.45
                color: '#B3BC46'
              - value: 31.03
                color: '#ACBA46'
              - value: 30.62
                color: '#A6B946'
              - value: 30.21
                color: '#A0B746'
              - value: 29.79
                color: '#9AB646'
              - value: 29.38
                color: '#94B446'
              - value: 28.97
                color: '#8EB346'
              - value: 28.55
                color: '#87B146'
              - value: 28.14
                color: '#81AF46'
              - value: 27.72
                color: '#7BAE46'
              - value: 27.31
                color: '#75AC46'
              - value: 26.9
                color: '#6FAB46'
              - value: 26.48
                color: '#69A946'
              - value: 26.07
                color: '#62A746'
              - value: 25.66
                color: '#5CA646'
              - value: 25.24
                color: '#56A446'
              - value: 24.83
                color: '#50A346'
              - value: 24.41
                color: '#4AA146'
              - value: 24
                color: '#44A047'
              - value: 23.81
                color: '#44A047'
              - value: 23.62
                color: '#44A047'
              - value: 23.43
                color: '#44A047'
              - value: 23.24
                color: '#44A047'
              - value: 23.05
                color: '#44A047'
              - value: 22.86
                color: '#44A047'
              - value: 22.67
                color: '#44A047'
              - value: 22.48
                color: '#44A047'
              - value: 22.29
                color: '#44A047'
              - value: 22.1
                color: '#44A047'
              - value: 21.9
                color: '#44A047'
              - value: 21.71
                color: '#44A047'
              - value: 21.52
                color: '#44A047'
              - value: 21.33
                color: '#44A047'
              - value: 21.14
                color: '#44A047'
              - value: 20.95
                color: '#44A047'
              - value: 20.76
                color: '#44A047'
              - value: 20.57
                color: '#44A047'
              - value: 20.38
                color: '#44A047'
              - value: 20.19
                color: '#44A047'
              - value: 20
                color: '#44A047'
              - value: 18.77
                color: '#419B54'
              - value: 17.54
                color: '#3F9661'
              - value: 16.31
                color: '#3D916E'
              - value: 15.08
                color: '#3B8C7C'
              - value: 13.85
                color: '#398789'
              - value: 12.62
                color: '#378296'
              - value: 11.38
                color: '#347DA4'
              - value: 10.15
                color: '#3278B1'
              - value: 8.92
                color: '#3073BE'
              - value: 7.69
                color: '#2E6ECC'
              - value: 6.46
                color: '#2C69D9'
              - value: 5.23
                color: '#2A64E6'
              - value: 4
                color: '#285FF4'
            hours_to_show: 36
            points_per_hour: 0.5
            card_mod:
              style: |
                ha-card {
                  box-shadow: none;
                  border: none;
                  background: none;
                  width: 100%;
                }
      styles:
        card:
          - background: none
          - border: none
        custom_fields:
          temperature:
            - position: absolute
            - top: 15%
            - left: 3%
          humidity:
            - position: absolute
            - top: 15%
            - left: 75%
          power_1:
            - position: absolute
            - top: '-2%'
            - left: 3%
          power_2:
            - position: absolute
            - top: '-2%'
            - left: 40%
          power_3:
            - position: absolute
            - top: '-2%'
            - left: 75%
          graph_1:
            - filter: opacity(70%)
            - position: absolute
            - top: 40%
            - left: 0%
            - right: 0%
            - bottom: 0%
          graph_2:
            - filter: opacity(70%)
            - position: absolute
            - top: 40%
            - left: 0%
            - right: 0%
            - bottom: 0%
