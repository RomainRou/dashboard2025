decluttering_templates:
  template_thermostat_card:
    card:
      type: custom:simple-thermostat
      entity: '[[climate]]'
      step_size: 0.5
      header: false
      hide:
        state: true
      control:
        hvac:
          'off':
            name: Éteint
          heat:
            name: Chauffe
        preset:
          none:
            name: Manuel
            icon: mdi:hand-back-left
          frost:
            name: Hors-gel
            icon: mdi:snowflake
          eco:
            name: Nuit
            icon: mdi:weather-night
          comfort:
            name: Jour
            icon: mdi:weather-sunny
          boost:
            name: boost
            icon: mdi:rocket-launch
      layout:
        mode:
          headings: false
          icons: true
          names: true
  template_opening_card:
    card:
      type: custom:button-card
      entity: '[[entity]]'
      show_state: false
      name: '[[name]]'
      styles:
        card:
          - box-shadow: none
          - background: none
          - display: flex
          - flex-direction: column
          - justify-content: flex-start
          - align-items: center
        icon:
          - border-radius: 50px
          - width: 23px
          - height: 23px
          - padding: 8px
        name:
          - font-size: 14px
          - text-align: center
          - font-family: Roboto
          - font-weight: 411
          - margin-top: 11px
        state:
          - font-size: 12px
          - text-align: center
      state:
        - value: 'off'
          styles:
            icon:
              - color: '#47a24c'
              - background-color: '#263a27'
        - value: 'on'
          styles:
            icon:
              - color: '#f44336'
              - background-color: '#482422'
      tap_action:
        action: more-info
      layout: vertical
      extra_styles: |
        ha-card {
          border: none;
          background: none;
        }
  template_entity_card:
    card:
      type: custom:button-card
      entity: '[[entity]]'
      show_state: false
      name: '[[name]]'
      styles:
        card:
          - box-shadow: none
          - background: none
          - display: flex
          - flex-direction: column
          - justify-content: flex-start
          - align-items: center
        icon:
          - border-radius: 50px
          - width: 23px
          - height: 23px
          - padding: 8px
        name:
          - font-size: 14px
          - text-align: center
          - font-family: Roboto
          - font-weight: 411
          - margin-top: 11px
        state:
          - font-size: 12px
          - text-align: center
        custom_fields:
          sensor:
            - position: absolute
            - font-size: 12px
            - font-family: Roboto
            - left: 47%
            - bottom: 0%
      state:
        - value: paused
          styles:
            icon:
              - color: '#2196f3'
              - background-color: '#1d3447'
        - value: played
          styles:
            icon:
              - color: '#2196f3'
              - background-color: '#1d3447'
        - value: 'on'
          styles:
            icon:
              - color: '#2196f3'
              - background-color: '#1d3447'
        - value: 'off'
          styles:
            icon:
              - color: '#808080'
              - background-color: '#80808025'
        - value: unavailable
          styles:
            icon:
              - color: '#80808050'
              - background-color: '#80808025'
      tap_action:
        action: toggle
      hold_action:
        action: more-info
      layout: vertical
      custom_fields:
        sensor: |
          [[[
            if ('[[sensor_power]]' && states['[[sensor_power]]']) {
              return states['[[sensor_power]]'].state + (states['[[sensor_power]]'].attributes.unit_of_measurement ? ' ' + states['[[sensor_power]]'].attributes.unit_of_measurement : '');
            } else {
              return '';
            }
          ]]]
      extra_styles: |
        ha-card {
          border: none;
          background: none;
        }
  template_alarm_card:
    card:
      type: custom:button-card
      entity: '[[entity]]'
      show_state: true
      name: '[[name]]'
      styles:
        card:
          - box-shadow: none
          - background: none
          - display: flex
          - flex-direction: column
          - justify-content: flex-start
          - align-items: center
        icon:
          - border-radius: 50px
          - width: 23px
          - height: 23px
          - padding: 8px
        name:
          - font-size: 14px
          - text-align: center
          - font-family: Roboto
          - font-weight: 411
          - margin-top: 11px
        state:
          - font-size: 12px
          - text-align: center
      state:
        - value: disarmed
          styles:
            icon:
              - color: '#2196f3'
              - background-color: '#1d3447'
        - value: armed_away
          styles:
            icon:
              - color: '#47a24c'
              - background-color: '#263a27'
        - value: armed_night
          styles:
            icon:
              - color: '#47a24c'
              - background-color: '#263a27'
        - value: triggered
          styles:
            icon:
              - color: '#f44336'
              - background-color: '#482422'
              - animation: blinking 0.5s infinite
      extra_styles: |
        ha-card {
          border: none;
          background: none;
        }
        @keyframes blinking {
          0% {
            opacity: 1;
          }
          50% {
            opacity: 0.5;
          }
          100% {
            opacity: 1;
          }
        }
      tap_action:
        action: more-info
      layout: vertical
#template de la room card
  template_custom_button_room_card:
    card:
      type: custom:button-card
      tap_action:
        action: navigate
        navigation_path: '[[navigation]]'
        haptic: success
      show_icon: false
      aspect_ratio: 6/1
      entity: '[[entity_ville]]'
      name: '[[title]]'
      custom_fields:
        chip_card_right:
          card:
            type: custom:mushroom-chips-card
            alignment: end
            chips:
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[group_light]]'
                    state:
                      - recording
                      - 'on'
                  - condition: state
                    entity: '[[group_light]]'
                    state_not: unavailable
                chip:
                  type: template
                  entity: '[[group_light]]'
                  icon: >-
                    {% if states['[[group_light]]'].attributes['icon'] %}
                      {{ states['[[group_light]]'].attributes['icon'] }}
                    {% elif states['[[group_light]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[group_light]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: '#03a9f4'
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  tap_action:
                    action: none
                  content: >-
                    {{ expand('[[group_light]]') | selectattr('state', 'eq',
                    'on') | list | length }}
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[group_prises]]'
                    state:
                      - recording
                      - 'on'
                  - condition: state
                    entity: '[[group_prises]]'
                    state_not: unavailable
                chip:
                  type: template
                  entity: '[[group_prises]]'
                  icon: >-
                    {% if states['[[group_prises]]'].attributes['icon'] %}
                      {{ states['[[group_prises]]'].attributes['icon'] }}
                    {% elif
                    states['[[group_prises]]'].attributes['device_class'] %}
                      mdi:{{ states['[[group_prises]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: '#03a9f4'
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  tap_action:
                    action: none
                  content: >-
                    {{ expand('[[group_prises]]') | selectattr('state', 'eq',
                    'on') | list | length }}
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_1_right]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_1_right]]'
                  icon: >
                    {% if states['[[entity_1_right]]'].attributes['icon'] %} {{
                    states['[[entity_1_right]]'].attributes['icon'] }} {% elif
                    states['[[entity_1_right]]'].attributes['device_class'] %}
                      mdi:{{ states['[[entity_1_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_1_right]]', 'on') or
                    is_state('[[entity_1_right]]', 'recording') %}
                     [[entity_1_icon_color_right]]
                    {% endif %}
                  content: '[[content_1_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_2_right]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_2_right]]'
                  icon: >
                    {% if states['[[entity_2_right]]'].attributes['icon'] %} {{
                    states['[[entity_2_right]]'].attributes['icon'] }} {% elif
                    states['[[entity_2_right]]'].attributes['device_class'] %}
                      mdi:{{ states['[[entity_2_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_2_right]]', 'on') or
                    is_state('[[entity_2_right]]', 'recording') %}
                     [[entity_2_icon_color_right]]
                    {% endif %}
                  content: '[[content_2_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_3_right]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_3_right]]'
                  icon: >
                    {% if states['[[entity_3_right]]'].attributes['icon'] %} {{
                    states['[[entity_3_right]]'].attributes['icon'] }} {% elif
                    states['[[entity_3_right]]'].attributes['device_class'] %}
                      mdi:{{ states['[[entity_3_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_3_right]]', 'on') or
                    is_state('[[entity_3_right]]', 'recording') %}
                     [[entity_3_icon_color_right]]
                    {% endif %}
                  content: '[[content_3_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_1_right]]'
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_1_right]]'
                  icon: >
                    {% if states['[[light_1_right]]'].attributes['icon'] %}
                    {{ states['[[light_1_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_1_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_1_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_1_right]]', 'on') or
                    is_state('[[light_1_right]]', 'recording') %}
                     #03a9f4
                    {% endif %}
                  content: '[[content_light_1_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_2_right]]'
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_2_right]]'
                  icon: >
                    {% if states['[[light_2_right]]'].attributes['icon'] %}
                    {{ states['[[light_2_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_2_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_2_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_2_right]]', 'on') or
                    is_state('[[light_2_right]]', 'recording') %}
                     #03a9f4
                    {% endif %}
                  content: '[[content_light_2_right]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[light_3_right]]'
                    state:
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: toggle
                    haptic: success
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[light_3_right]]'
                  icon: >
                    {% if states['[[light_3_right]]'].attributes['icon'] %}
                    {{ states['[[light_3_right]]'].attributes['icon'] }} {%
                    elif
                    states['[[light_3_right]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[light_3_right]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[light_3_right]]', 'on') or
                    is_state('[[light_3_right]]', 'recording') %}
                     #03a9f4
                    {% endif %}
                  content: '[[content_light_3_right]]'
        chip_card_left:
          card:
            type: custom:mushroom-chips-card
            alignment: end
            chips:
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[cover_group]]'
                    state_not: unavailable
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  icon: >-
                    {% set position =
                    states['[[cover_group]]'].attributes.current_position | int
                    %} {% if position == 100 %}
                      cil:shutter-0
                    {% elif position >= 75 %}
                      cil:shutter-1
                    {% elif position >= 50 %}
                      cil:shutter-2
                    {% elif position >= 25 %}
                      cil:shutter-3
                    {% elif position >= 0 %}
                      cil:shutter-4
                    {% else %}
                      mdi:window-shutter-closed
                    {% endif %}
                  icon_color: '#03a9f4'
                  content: |
                    {% if expand("[[cover_group]]") | length > 0 %}
                      {% set all = expand("[[cover_group]]" | lower) -%} 
                      {% set positions = all | map(attribute='attributes.current_position') | list -%}
                      {% set fermes = positions | reject("!=", 0) | list | count %}
                      {% set ouverts = positions | reject("!=", 100) | list | count %}
                      {% set partiels = positions | list | count - ouverts - fermes %}
                      {%- if fermes > 0 %} F:{{ fermes }} {%- endif %} 
                      {%- if partiels > 0 %} P:{{ partiels }} {%- endif %} 
                      {%- if ouverts > 0 %} O:{{ ouverts }} {%- endif %}
                    {% else %}
                      {% set position = states['[[cover]]'].attributes.current_position | int %}
                      {% if position > 0 %} {{ position }}% {% endif %}
                    {% endif %}
                  entity: '[[cover_group]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_cover]]'
                    state_not: unavailable
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  icon: >-
                    {% set position =
                    states['[[entity_cover]]'].attributes.current_position | int
                    %} {% if position == 100 %}
                      cil:shutter-0
                    {% elif position >= 75 %}
                      cil:shutter-1
                    {% elif position >= 50 %}
                      cil:shutter-2
                    {% elif position >= 25 %}
                      cil:shutter-3
                    {% elif position >= 0 %}
                      cil:shutter-4
                    {% else %}
                      mdi:window-shutter-closed
                    {% endif %}
                  icon_color: '#03a9f4'
                  entity: '[[entity_cover]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_alarme]]'
                    state:
                      - armed_away
                      - armed_night
                chip:
                  type: alarm-control-panel
                  entity: '[[entity_alarme]]'
                  tap_action:
                    action: perform-action
                    perform_action: alarm_control_panel.alarm_disarm
                    target:
                      entity_id: '[[entity_alarme]]'
                    data:
                      code: '[[code_alarm]]'
                  content_info: none
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[capteur_bal]]'
                    state_not: '0'
                  - condition: state
                    entity: '[[capteur_bal]]'
                    state_not: unavailable
                chip:
                  type: template
                  entity: '[[capteur_bal]]'
                  icon: mdi:email-outline
                  content: '{{ states(''[[capteur_bal]]'') }}'
                  icon_color: |-
                    {% if states('[[capteur_bal]]') | int > 0 %}        
                      red
                    {% endif %}
                  tap_action:
                    action: perform-action
                    perform_action: script.mise_a_zero_boite_aux_lettres
                    target: {}
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_camera]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: navigate
                    navigation_path: '[[navigation_cam]]'
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_camera]]'
                  icon: >
                    {% if states['[[entity_camera]]'].attributes['icon'] %} {{
                    states['[[entity_camera]]'].attributes['icon'] }} {% elif
                    states['[[entity_camera]]'].attributes['device_class'] %}
                      mdi:{{ states['[[entity_camera]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_camera]]', 'on') or
                    is_state('[[entity_camera]', 'recording') %}
                     [[entity_color_camera]]
                    {% endif %}
                  content: '[[content_camera]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_1_left]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_1_left]]'
                  icon: >
                    {% if states['[[entity_1_left]]'].attributes['icon'] %}
                    {{ states['[[entity_1_left]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_1_left]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_1_left]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_1_left]]', 'on') or
                    is_state('[[entity_1_left]]', 'recording') %}
                     [[entity_1_icon_color_left]]
                    {% endif %}
                  content: '[[content_1_left]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_2_left]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_2_left]]'
                  icon: >
                    {% if states['[[entity_2_left]]'].attributes['icon'] %}
                    {{ states['[[entity_2_left]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_2_left]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_2_left]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_2_left]]', 'on') or
                    is_state('[[entity_2_left]]', 'recording') %}
                     [[entity_2_icon_color_left]]
                    {% endif %}
                  content: '[[content_2_left]]'
              - type: conditional
                conditions:
                  - condition: state
                    entity: '[[entity_3_left]]'
                    state:
                      - recording
                      - 'on'
                chip:
                  type: template
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                  entity: '[[entity_3_left]]'
                  icon: >
                    {% if states['[[entity_3_left]]'].attributes['icon'] %}
                    {{ states['[[entity_3_left]]'].attributes['icon'] }} {%
                    elif
                    states['[[entity_3_left]]'].attributes['device_class']
                    %}
                      mdi:{{ states['[[entity_3_left]]'].attributes['device_class'] }}
                    {% else %}
                      mdi:device-unknown
                    {% endif %}
                  icon_color: >
                    {% if is_state('[[entity_3_left]]', 'on') or
                    is_state('[[entity_3_left]]', 'recording') %}
                     [[entity_3_icon_color_left]]
                    {% endif %}
                  content: '[[content_3_left]]'
        chip_card_center:
          card:
            type: conditional
            conditions:
              - condition: state
                entity: '[[temp]]'
                state_not: unavailable
            card:
              type: custom:button-card
              tap_action:
                action: navigate
                navigation_path: '[[thermostat]]'
              show_icon: false
              entity: '[[temp]]'
              layout: icon_label
              show_label: false
              show_name: false
              show_state: true
              styles:
                state:
                  - color: '#2196f3'
                card:
                  - width: 60px
        chip_card_center_2:
          card:
            type: conditional
            conditions:
              - condition: state
                entity: '[[humidity]]'
                state_not: unavailable
            card:
              type: custom:button-card
              tap_action:
                action: none
              show_icon: false
              entity: '[[humidity]]'
              layout: icon_label
              show_label: false
              show_name: false
              show_state: true
              styles:
                state:
                  - color: '#2196f3'
                card:
                  - width: 60px
      styles:
        name:
          - color: white
          - font-weight: bold
          - text-shadow: >-
              1px 1px 3px #000000, 1px 1px 2px #000000, 1px 1px 2px #000000, 1px
              1px 2px
        card:
          - background-position: center
          - background-size: cover
          - background: |
              [[[ 
                if (!'[[entity_ville]]') return "url('[[background_image]]') no-repeat center center / cover";
                if (entity && entity.state === "sunny") return "url('https://i.pinimg.com/originals/d8/a2/ee/d8a2eee27b91f50078645085e4057f3c.gif') no-repeat center center / cover";
                if (entity && entity.state === "snowy") return "url('https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzJ2Z2FzOTFnZWhkdTczOHg5MTU1enhweWR4b2JpemM4MGpmaWxibyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o6fISORwH1fcsQW0U/giphy.gif') no-repeat center center / cover";
                if (entity && entity.state === "snowy-rainy") return "url('https://www.icegif.com/wp-content/uploads/2022/01/icegif-1013.gif') no-repeat center center / cover";
                if (entity && entity.state === "lightning-rainy") return "url('https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWFjZmp3YWVva2pzaWhuZ3hmcHF6b3dna2FkMGpwbXh0ZWZoMzBmMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o7TKrt6z6Eg9MLvl6/giphy.gif') no-repeat center center / cover";
                if (entity && entity.state === "lightning") return "url('https://media1.giphy.com/media/l0MYzA5czu7GV1Xt6/giphy.gif?cid=9b38fe919too4we4vrgbc57o3xqx0jjm9qi9w6f7gnh6h2sj&ep=v1_gifs_search&rid=giphy.gif&ct=g') no-repeat center center / cover";
                if (entity && entity.state === "hail") return "url('https://i.gifer.com/DJxO.gif') no-repeat center center / cover";
                if (entity && entity.state === "partlycloudy") return "url('https://i.gifer.com/g1vA.gif') no-repeat center center / cover";
                if (entity && entity.state === "cloudy") return "url('https://i.gifer.com/g1vA.gif') no-repeat center center / cover";
                if (entity && entity.state === "mostlycloudy") return "url('https://i.gifer.com/Lx0q.gif') no-repeat center center / cover";
                if (entity && entity.state === "clear-night") return "url('https://i.gifer.com/IrS.gif') no-repeat center center / cover";
                if (entity && entity.state === "fog") return "url('https://i.gifer.com/8AC8.gif') no-repeat center center / cover";
                if (entity && entity.state === "rainy") return "url('https://i.gifer.com/FEuz.gif') no-repeat center center / cover";
                return "url('[[background_image]]') no-repeat center center / cover";
              ]]]         
        custom_fields:
          chip_card_right:
            - position: absolute
            - right: 1%
          chip_card_left:
            - position: absolute
            - left: 1%
          chip_card_center:
            - position: absolute
            - left: 42%
            - transform: scale(0.7)
            - top: 0%
          chip_card_center_2:
            - position: absolute
            - left: 42%
            - transform: scale(0.7)
            - bottom: 0%
  template_custom_badges:
    card:
      type: custom:mushroom-template-badge
      content: '{{ states(''[[sensor_temp]]'') | float | round(1) }}°' #sensor temp pour les badges 
      icon: mdi:thermometer
      #couleur de l'icone dynamique s'adapte a la temperature 
      color: |-
        {% set temp = states('[[sensor_temp]]') | float %} 
        {% if temp >= 32 %}
          rgb(199, 199, 199)
        {% elif 31.62 <= temp < 32 %}
          rgb(255, 69, 58)
        {% elif 31.23 <= temp < 31.62 %}
          rgb(247, 72, 58)
        {% elif 30.85 <= temp < 31.23 %}
          rgb(240, 76, 59)
        {% elif 30.46 <= temp < 30.85 %}
          rgb(233, 79, 59)
        {% elif 30.08 <= temp < 30.46 %}
          rgb(226, 83, 60)
        {% elif 29.69 <= temp < 30.08 %}
          rgb(219, 86, 60)
        {% elif 29.31 <= temp < 29.69 %}
          rgb(211, 90, 61)
        {% elif 28.92 <= temp < 29.31 %}
          rgb(204, 93, 61)
        {% elif 28.54 <= temp < 28.92 %}
          rgb(197, 97, 62)
        {% elif 28.15 <= temp < 28.54 %}
          rgb(190, 100, 62)
        {% elif 27.77 <= temp < 28.15 %}
          rgb(183, 104, 63)
        {% elif 27.38 <= temp < 27.77 %}
          rgb(175, 107, 63)
        {% elif 27 <= temp < 27.38 %}
          rgb(168, 111, 64)
        {% elif 26.62 <= temp < 27 %}
          rgb(161, 114, 64)
        {% elif 26.23 <= temp < 26.62 %}
          rgb(154, 118, 65)
        {% elif 25.85 <= temp < 26.23 %}
          rgb(147, 121, 65)
        {% elif 25.46 <= temp < 25.85 %}
          rgb(139, 125, 66)
        {% elif 25.08 <= temp < 25.46 %}
          rgb(132, 128, 66)
        {% elif 24.69 <= temp < 25.08 %}
          rgb(125, 132, 67)
        {% elif 24.31 <= temp < 24.69 %}
          rgb(118, 135, 67)
        {% elif 23.92 <= temp < 24.31 %}
          rgb(111, 139, 68)
        {% elif 23.54 <= temp < 23.92 %}
          rgb(103, 142, 68)
        {% elif 23.15 <= temp < 23.54 %}
          rgb(96, 146, 69)
        {% elif 22.77 <= temp < 23.15 %}
          rgb(89, 149, 69)
        {% elif 22.38 <= temp < 22.77 %}
          rgb(82, 153, 70)
        {% elif 22 <= temp < 22.38 %}
          rgb(75, 156, 70)
        {% elif 21.38 <= temp < 22 %}
          rgb(68, 160, 71)
        {% elif 20.75 <= temp < 21.38 %}
          rgb(63, 160, 81)
        {% elif 20.13 <= temp < 20.75 %}
          rgb(59, 161, 92)
        {% elif 19.5 <= temp < 20.13 %}
          rgb(55, 161, 103)
        {% elif 18.88 <= temp < 19.5 %}
          rgb(51, 162, 114)
        {% elif 18.25 <= temp < 18.88 %}
          rgb(47, 162, 125)
        {% elif 17.63 <= temp < 18.25 %}
          rgb(43, 163, 135)
        {% elif 17 <= temp < 17.63 %}
          rgb(39, 163, 146)
        {% elif 16.38 <= temp < 17 %}
          rgb(35, 164, 157)
        {% elif 15.75 <= temp < 16.38 %}
          rgb(31, 165, 168)
        {% elif 15.13 <= temp < 15.75 %}
          rgb(27, 165, 179)
        {% elif 14.5 <= temp < 15.13 %}
          rgb(23, 166, 189)
        {% elif 13.88 <= temp < 14.5 %}
          rgb(19, 166, 200)
        {% elif 13.25 <= temp < 13.88 %}
          rgb(15, 167, 211)
        {% elif 12.63 <= temp < 13.25 %}
          rgb(11, 167, 222)
        {% elif 12 <= temp < 12.63 %}
          rgb(7, 168, 233)
        {% else %}
          rgb(3, 169, 244)
        {% endif %}
      entity: '[[sensor_temp]]'
      tap_action:
        action: none
      hold_action:
        action: none
      double_tap_action:
        action: none
      label: '[[label]]' #titre du badge
#template de la carte du tableu pronote integrable dans les popups
  template_pronote_card:
    card:
      type: custom:tabbed-card
      styles:
        '--mdc-typography-button-font-size': 11px
        '--mdc-theme-primary': white
        '--mdc-tab-text-label-color-default': grey
        background: rgb(54, 54, 54)
        border: solid 1px rgb(40, 40, 40)
        border-top-left-radius: 10px
        border-top-right-radius: 10px
        font-style: italic
      tabs:
        - attributes:
            isMinWidthIndicator: true
            label: 📆 Emploi du temps
          card:
            type: custom:pronote-timetable-card
            display_header: false
            display_lunch_break: true
            display_classroom: true
            display_teacher: true
            display_day_hours: true
            dim_ended_lessons: true
            max_days: null
            current_week_only: false
            enable_slider: true
            display_free_time_slots: true
            entity: sensor.pronote_[[nom_prenom]]_timetable_period
        - attributes:
            isMinWidthIndicator: true
            label: 📗Devoirs
          card:
            type: custom:pronote-homework-card
            entity: sensor.pronote_[[nom_prenom]]_homework
            display_header: false
            display_done_homework: true
            reduce_done_homework: true
            current_week_only: false
        - attributes:
            isMinWidthIndicator: true
            label: ❌ Absences et sorties
          card:
            type: custom:pronote-absences-card
            entity: sensor.pronote_[[nom_prenom]]_absences
            display_header: false
            max_absences: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝Retards
          card:
            type: custom:pronote-delays-card
            entity: sensor.pronote_[[nom_prenom]]_delays
            display_header: false
            max_delays: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝Evaluations
          card:
            type: custom:pronote-evaluations-card
            entity: sensor.pronote_[[nom_prenom]]_evaluations
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIdicator: true
            label: 📝Notes
          card:
            type: custom:pronote-grades-card
            entity: sensor.pronote_[[nom_prenom]]_grades
            grade_format: full
            display_header: false
            display_date: true
            display_comment: true
            display_class_average: false
            compare_with_class_average: true
            compare_with_ratio: null
            display_coefficient: false
            display_class_min: false
            display_class_max: false
            display_new_grade_notice: true
            max_grades: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝punitions test
          card:
            type: custom:pronote-punishements-card
            entity: sensor.pronote_[[nom_prenom]]_punishements
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 📝informations test
          card:
            type: custom:pronote-info-surveys-card
            entity: sensor.pronote_[[nom_prenom]]_information_and_surveys
            display_header: false
            display_description: true
            display_teacher: true
            display_date: true
            display_comment: true
            display_coefficient: true
            max_evaluations: null
            child_name: null
        - attributes:
            isMinWidthIndicator: true
            label: 🗞️Informations
          card:
            type: markdown
            content: |-
              <table>
                  <tbody>
                      {% set items = state_attr('sensor.pronote_[[nom_prenom]]_information_and_surveys','information_and_surveys') %}
                      {%-for i in range(0, items | count, 1) -%}
                      <tr> 
                          <td><span>{{items[i].author}} / {{items[i].category}} :</span>
                          {{items[i].content}}</td>
                      </tr>
                      {% endfor %}
                </tbody>
              </table>
            card_mod:
              style:
                .: |
                  ha-card ha-markdown {
                    padding:0px
                  }
                  ha-card ha-markdown.no-header {
                    padding:0px
                  }
                  ha-markdown {
                      overflow-y: auto;
                      border-bottom-left-radius: 10px; 
                      border-bottom-right-radius: 10px;
                      border-top-left-radius: 10px; 
                      border-top-right-radius: 10px;
                    }
                ha-markdown$: |
                  div {
                      background-color:rgb(54, 54, 54, 0.3);
                      padding: 5px 5px;
                      color:white;
                      font-weight:normal;
                      font-size:1em;
                      border-top-left-radius: 10px; 
                      text-align: center;
                       
                  }
                  mark {
                      background: #00BD81;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #005f41 2px;
                      font-size: 1.2em;
                      }
                  h2 {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      margin-left: 10%;
                      margin-right: 10%;
                      }
                  table{
                    border-collapse: collapse;
                    font-size: 0.85em;
                    font-family: Roboto;
                    width: auto;
                    outline: 0px solid #393c3d;
                    margin-top: 0px;
                  } caption {
                      text-align: center;
                      font-weight: bold;
                      font-size: 1em;
                  } td {
                      padding: 5px 8px 5px 8px;
                      text-align: left;
                      border-bottom: 0px solid #1c2020;
                  }
                  tr {
                      border-bottom: 0px solid #1c2020;
                  }

                  tr:nth-of-type(even) {
                      background-color: rgb(54, 54, 54, 0.3);
                  }
                  tr:last-of-type {
                      border-bottom: transparent;
                  }
                  mark {
                      background: #009767;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                  }
                  span {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      vertical-align: center;
                      height: auto;
                      padding: 5px;
                      display: block;
                  }
                  span {
                      padding: 5px;
                  }
        - attributes:
            isMinWidthIndicator: true
            label: 🚨punissions
          card:
            type: markdown
            content: |-
              <table>
                  <tbody>
                      {% set items = state_attr('sensor.pronote_[[nom_prenom]]_punishments','punishments') %}
                      {%-for i in range(0, items | count, 1) -%}
                      <tr> 
                          <td><span>{{items[i].date}}
                          <td><span>{{items[i].nature}}<br></span>
                          <td><span>{{items[i].giver}} <br> {{items[i].reasons}}<br>
                          {{items[i].circumstances}} </span>
                          </td>
                      </tr>
                      {% endfor %}
                </tbody>
              </table>
            card_mod:
              style:
                .: |
                  ha-card ha-markdown {
                    padding:0px
                  }
                  ha-card ha-markdown.no-header {
                    padding:0px
                  }
                  ha-markdown {
                      overflow-y: auto;
                      border-bottom-left-radius: 10px; 
                      border-bottom-right-radius: 10px;
                      border-top-left-radius: 10px; 
                      border-top-right-radius: 10px;
                    }
                ha-markdown$: |
                  div {
                      background-color:rgb(54, 54, 54, 0.3);
                      padding: 5px 5px;
                      color:white;
                      font-weight:normal;
                      font-size:1em;
                      border-top-left-radius: 10px; 
                      text-align: center;
                       
                  }
                  mark {
                      background: #00BD81;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #005f41 2px;
                      font-size: 1.2em;
                      }
                  h2 {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      margin-left: 10%;
                      margin-right: 10%;
                      }
                  table{
                    border-collapse: collapse;
                    font-size: 0.85em;
                    font-family: Roboto;
                    width: auto;
                    outline: 0px solid #393c3d;
                    margin-top: 0px;
                  } caption {
                      text-align: center;
                      font-weight: bold;
                      font-size: 1em;
                  } td {
                      padding: 5px 8px 5px 8px;
                      text-align: left;
                      border-bottom: 0px solid #1c2020;
                  }
                  tr {
                      border-bottom: 0px solid #1c2020;
                  }

                  tr:nth-of-type(even) {
                      background-color: rgb(54, 54, 54, 0.3);
                  }
                  tr:last-of-type {
                      border-bottom: transparent;
                  }
                  mark {
                      background: #009767;
                      color: #222627;
                      border-radius: 5px;
                      padding: 5px;
                  }
                  span {
                      background: #2471A3;
                      color: white;
                      border-radius: 5px;
                      padding: 5px;
                      border: solid #A9CCE3 2px;
                      font-size: 1em;
                      text-align: center;
                      vertical-align: center;
                      height: auto;
                      padding: 5px;
                      display: block;
                  }
                  span {
                      padding: 5px;
                  }
        - attributes:
            isMinWidthIndicator: true
            label: 🍖Menu cantine
          card:
            type: custom:tabbed-card
            title: menu cantine
            styles:
              '--mdc-typography-button-font-size': 10px
              '--mdc-theme-primary': white
              '--mdc-tab-text-label-color-default': grey
              background: rgb(54, 54, 54)
              border: solid 1px rgb(40, 40, 40)
            tabs:
              - attributes:
                  isMinWidthIndicator: true
                  label: 🥗Entrées
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}
                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'> 
                        {% for entry in items[i].first_meal %}
                         {{ entry.name }}
                        {% endfor %}
                      </td>
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                            border-top-left-radius:10px;
                            border-top-right-radius:10px;
                            border-bottom-left-radius:10px;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 0px;
                          text-align: center;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 0px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent; 
                        }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-weight: normal;
                              font-size: 0.8em;
                              }
                        span {
                            background: transparent;
                            color: white;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍖Plats principal
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'> 
                        {% for main in items[i].main_meal %}
                          {{ main.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍟Accompagnements
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% if items[i].side_meal %}
                          {% for side in items[i].side_meal %}
                            {{ side.name }}
                          {% endfor %}
                        {% else %}
                          PAS_DISPO
                        {% endif %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🧀Fromages
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}

                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% for cheese in items[i].cheese %}
                          {{ cheese.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
              - attributes:
                  isMinWidthIndicator: true
                  label: 🍦Desserts
                card:
                  type: markdown
                  content: >-
                    <table>
                        <tbody>
                    {% set items =
                    state_attr('sensor.pronote_[[nom_prenom]]_menus','menus') %}
                    {% for i in range(0, items | count, 1) %}
                      {% if items[i].is_lunch == True %}
                      <tr>
                      <td width='11%'>      
                      <mark>  
                      {{ items[i].date | as_datetime | as_timestamp | timestamp_custom('%d/%m') }}
                      </mark>
                      </td>
                      <td width='70%'>
                        {% for dessert in items[i].dessert %}
                          {{ dessert.name }}
                        {% endfor %}
                      </td>
                        {% endif %}
                    {% endfor %}
                      </tbody>
                    </table>
                  card_mod:
                    style:
                      .: |
                        ha-card ha-markdown {
                          padding:0px
                        }
                        ha-card ha-markdown.no-header {
                          padding:0px
                        }
                         ha-markdown {
                            overflow-y: auto;
                          }
                      ha-markdown$: |
                        div {
                            background-color:rgb(54, 54, 54, 0.3);
                            padding: 5px 5px;
                            color:white;
                            font-weight:normal;
                            font-size:1em;
                            border-top-left-radius: 10px; 
                            text-align: center;
                        }
                        table{
                          border-collapse: collapse;
                          font-family: Roboto;
                          width: 100%;
                          outline: 0px solid #393c3d;
                          margin-top: 5px;
                        } caption {
                            text-align: center;
                            font-weight: bold;
                            font-size: 1em;
                        } td {
                            padding: 5px 8px 5px 8px;
                            text-align: center;
                            border-bottom: 0px solid #1c2020;
                            margin-top: 5px;
                            font-size: 0.9em;
                        }
                        tr {
                            border-bottom: 0px solid #1c2020;
                        }

                        tr:nth-of-type(even) {
                            background-color: rgb(54, 54, 54, 0.3);
                        }
                        tr:last-of-type {
                            border-bottom: transparent;          }
                        mark {
                              background: transparent;
                              color: white;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid grey 2px;
                              font-size: 0.8em;
                              font-weight: normal;
                              }
                        span {
                            background: #EC4B34;
                            color: #222627;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
                        tr:nth-child(n+2) > td:nth-child(2) {
                          text-align: center;
                        }
#template de la carte de controle de volet avec affichage d'etat dans les popups
  template_cover_chip_card:
    card:
      type: horizontal-stack
      cards:
        - type: custom:button-card
          entity: '[[cover]]'
          show_state: false
          show_name: false
          styles:
            card:
              - box-shadow: none
              - background: none
              - display: flex
              - flex-direction: column
              - justify-content: flex-start
              - align-items: center
            icon:
              - border-radius: 50px
              - width: 23px
              - height: 23px
              - padding: 8px
          state:
            - operator: template
              value: |
                [[[ return entity.attributes.current_position === 100; ]]]
              icon: cil:shutter-0
              styles:
                icon:
                  - color: '#2196f3'
                  - background-color: '#1d3447'
            - operator: template
              value: >
                [[[ return entity.attributes.current_position >= 75 &&
                entity.attributes.current_position < 100; ]]]
              icon: cil:shutter-1
              styles:
                icon:
                  - color: '#2196f3'
                  - background-color: '#1d3447'
            - operator: template
              value: >
                [[[ return entity.attributes.current_position >= 50 &&
                entity.attributes.current_position < 75; ]]]
              icon: cil:shutter-2
              styles:
                icon:
                  - color: '#2196f3'
                  - background-color: '#1d3447'
            - operator: template
              value: >
                [[[ return entity.attributes.current_position >= 25 &&
                entity.attributes.current_position < 50; ]]]
              icon: cil:shutter-3
              styles:
                icon:
                  - color: '#2196f3'
                  - background-color: '#1d3447'
            - operator: template
              value: |
                [[[ return entity.attributes.current_position >= 0 &&
                entity.attributes.current_position < 25; ]]]
              icon: cil:shutter-4
              styles:
                icon:
                  - color: '#2196f3'
                  - background-color: '#1d3447'
          tap_action:
            action: none
          hold_action:
            action: none
          extra_styles: |
            ha-card {
              border: none;
              background: none;
            }
        - type: custom:button-card
          entity: '[[cover]]'
          show_state: true
          show_name: false
          show_icon: false
          styles:
            card:
              - box-shadow: none
              - background: none
              - display: flex
              - flex-direction: column
              - justify-content: flex-start
              - align-items: center
            state:
              - margin-top: 12px
              - font-size: 12px
              - text-align: center
              - font-family: Roboto
              - font-weight: 411
              - margin-top: 11px
            icon:
              - border-radius: 50px
              - width: 23px
              - height: 23px
              - padding: 8px
          state_display: |
            [[[ 
              if (entity.attributes.entity_id && entity.attributes.entity_id.length > 0) {
                // Récupère les états des entités membres
                const toutesCouvres = entity.attributes.entity_id.map(id => {
                  const etat = states[id];
                  if (etat && etat.attributes && typeof etat.attributes.current_position === "number") {
                    return etat.attributes.current_position;
                  }
                  return null; // Valeur par défaut si aucune position valide
                }).filter(pos => pos !== null); 
                const fermes = toutesCouvres.filter(pos => pos === 0).length;
                const ouverts = toutesCouvres.filter(pos => pos === 100).length;
                const partiels = toutesCouvres.length - fermes - ouverts;          
                let resultat = [];
                if (fermes > 0) resultat.push(`F: ${fermes}`);
                if (partiels > 0) resultat.push(`P: ${partiels}`);
                if (ouverts > 0) resultat.push(`O: ${ouverts}`);
                return resultat.join(" ");
              } else {                
                const position = entity.attributes.current_position || 0;
                if (position === 100) return "Ouvert";
                if (position === 0) return "Fermé";
                return `${position}%`;
              }
            ]]]
          tap_action:
            action: none
          hold_action:
            action: none
          extra_styles: |
            ha-card {
              border: none;
              background: none;
            }
        - type: custom:button-card
          variables:
            current_position: '[[[ return entity.attributes.current_position || 0; ]]]'
          entity: '[[cover]]'
          icon: mdi:arrow-down
          show_state: false
          show_name: false
          styles:
            card:
              - box-shadow: none
              - background: none
              - display: flex
              - flex-direction: column
              - justify-content: flex-start
              - align-items: center
            icon:
              - border-radius: 13px
              - width: 23px
              - height: 23px
              - padding: 8px
              - color: >
                  [[[ return variables.current_position == 0 ? "#808080" :
                  "#2196f3"; ]]]
              - background-color: >
                  [[[ return variables.current_position == 0 ? "#80808025" :
                  "#1d3447"; ]]]
          tap_action:
            action: perform-action
            perform_action: cover.close_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          hold_action:
            action: none
          double_tap_action:
            action: none
          extra_styles: |
            ha-card {
              border: none;
              background: none;
            }
        - type: custom:button-card
          entity: '[[cover]]'
          icon: mdi:stop
          show_state: false
          show_name: false
          styles:
            card:
              - box-shadow: none
              - background: none
              - display: flex
              - flex-direction: column
              - justify-content: flex-start
              - align-items: center
            icon:
              - border-radius: 13px
              - width: 23px
              - height: 23px
              - padding: 8px
              - color: |
                  [[[ 
                    const position = entity.attributes.current_position || 0;
                    return position > 0 && position < 100 ? "#2196f3" : "#808080"; 
                  ]]]
              - background-color: |
                  [[[ 
                    const position = entity.attributes.current_position || 0;
                    return position > 0 && position < 100 ? "#1d3447" : "#80808025"; 
                  ]]]
          tap_action:
            action: perform-action
            perform_action: cover.stop_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          extra_styles: |
            ha-card {
              border: none;
              background: none;
            }
        - type: custom:button-card
          variables:
            current_position: '[[[ return entity.attributes.current_position || 0; ]]]'
          entity: '[[cover]]'
          icon: mdi:arrow-up
          show_state: false
          show_name: false
          styles:
            card:
              - box-shadow: none
              - background: none
              - display: flex
              - flex-direction: column
              - justify-content: flex-start
              - align-items: center
            icon:
              - border-radius: 13px
              - width: 23px
              - height: 23px
              - padding: 8px
              - color: >
                  [[[ return variables.current_position == 100 ? "#808080" :
                  "#2196f3";

                  ]]]
              - background-color: >
                  [[[ return variables.current_position == 100 ? "#80808025" :
                  "#1d3447"; ]]]
          tap_action:
            action: perform-action
            perform_action: cover.open_cover
            target:
              entity_id: '[[cover]]'
            haptic: success
          hold_action:
            action: none
          double_tap_action:
            action: none
          extra_styles: |
            ha-card {
              border: none;
              background: none;
            }
